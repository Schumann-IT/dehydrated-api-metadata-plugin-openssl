package internal

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestNewKey_ValidRSAKey(t *testing.T) {
	// Create a temporary file with a valid RSA key
	tempDir, err := os.MkdirTemp("", "test-keys")
	require.NoError(t, err)
	defer os.RemoveAll(tempDir)

	keyPath := filepath.Join(tempDir, "test.key")
	//nolint:gosec // this is an autogenerated key for testing
	keyContent := `-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAvAz3cHOmsc87AnfFJiszA+kJ6VwG0Lw47+P3MVKqqxWduSFN
OCRhIUcicjoMl8k1BtBx2Gf0FuHP8/BM0C1it/5IR+6hZWXp03uUCDojnvTDolds
jItyaj72p/jJgdaXffV6kLNc953riOc6E7n7jEw+4kScuH1w0/w3V+DkOQfOV2y8
+p8uqem7xeTV6iYSeawfJPt1n+ayo3IfwMzWhj2MfMTWkws5BWYJJ8O+5R1nnJx6
LxBKm+qOaBC9NBrrgsZOrpTe+KeOtNJVh81RQMsRCa8AmnqeJzIsaDyhAhmqbO6i
HdoRHnRE/iKYEbxWAFR/MDEqT+2zxhOexst4hQIDAQABAoIBAQCoA4XIaOwUjayR
ZeU1Vv97jOiYIOrN8H2Gh81BujRWKzgCQii18nr9uoqiOA8sRk8kSXSN/0LsdtDP
iHF4xjQfZAe8jQ6Sg93IX+9A8oEE8ncgQq/vWl/dYWgLZ5LSeKJdncfmJPr5GZVp
ef4/xblj/nNowhisFReLrxrbX0lJUZH14mfwW/fvZiKViSf3pMm+10bIQFSiyGZp
VGOHn99J5QkWtTSEXiIlqLBbH1zXzIZQfwoGcyd+D94aTElC/BF2AUMUsec8H3b0
S0JXvpndXdBGkIQrJpBxisqpODeHgcNKBp4ggKP4YMLOLxUbZTH17GjM1KpxfSc9
ZnP9KG95AoGBAOBLAz6mh0rtWChfK+iXcogiMFvSFWtCOyQ0fiv20k0qcURCeUez
TvgfgOzYWCgB2NBB26PwwQgCYjqxip7a5GkYiffkR+2YLhSjYKI2Z1jcMQgndnbC
IvPyR/wB8jmHWkxbLY1sVtP0iHdhoEJrc/CRu875cDZ5U9Mn4ys095pzAoGBANai
XwcQmSkbJOeU8dOsV5lmj/+XCUZzQ3G+zNzReZV2Hb8NTAHnbWN213hDfp3cRoOx
gYcPMz6SeFnTCV5v2q+hVm9woDi+7MM7FRtVPdhxOsLMX+1hV1xQaNQWoxnKJ82X
kuTeAgIgzD/ZM8E3ibMge+0KeeJHjwXZBUsc0AsnAoGAEgaVTSyvBNuMUTpM2hWJ
090Di+2XYRZikGdTmI7umdsGXVkGTDfh6dkGUIKWmyiC10HjuAo6ST1/zX3FST0I
TFX3iJ+lFDg9w9TZiE/dAGw52JDrWWIC0x4uoNc7M1pobGiLgakqVUB60zVaXtwp
5jSgJmMvnIEltnunKyrHl3cCgYBCTkr5DcGjF0WhXTwP3k/5jduyY+BzqSwOuZjk
Jrpe1+x8lwkCFZKPhaku9/rnnaMTEAUpyiJUlD8l0LI2QGvYkgj3yF1W6nSOI3Rz
yzOd5+z1PNntpYKtfBHGY2/jibYeJ1Mz7PnF2of+uYTpjdS2R7TBF9lrdBvU/KRL
/gyvRQKBgQC4Vwtd5QY0IKSrnyUmm5BOLDfqVloDw30hCglgLSvFgGNpkIsYOsPV
FSTONusE8Zhg/byfdmuwlD9KFbNO+ELI9fmaQQQ7ayJzEFW6Sik0ixz57m3u7CtV
kj5LTtzaoUCIOcz/eFhSNjCGQWNoFJsgLYt8CzM9vTtlUWho+6hYoQ==
-----END RSA PRIVATE KEY-----`

	err = os.WriteFile(keyPath, []byte(keyContent), 0600)
	require.NoError(t, err)

	key := NewKey(keyPath)
	require.NotNil(t, key)
	require.Equal(t, keyPath, key.File)
}

func TestNewKey_ValidECKey(t *testing.T) {
	// Create a temporary file with a valid RSA key
	tempDir, err := os.MkdirTemp("", "test-keys")
	require.NoError(t, err)
	defer os.RemoveAll(tempDir)

	keyPath := filepath.Join(tempDir, "test.key")
	//nolint:gosec // this is an autogenerated key for testing
	keyContent := `-----BEGIN EC PARAMETERS-----
BggqhkjOPQMBBw==
-----END EC PARAMETERS-----
-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIKAfoZtABjL78XSSgzyehemNC46oFGzUzH26US/x9Pq6oAoGCCqGSM49
AwEHoUQDQgAE6IkAkBTygxTZPZkWlegB3iFotYsGeQyyBdIMxl40OOLeIIonQ2jg
Xur4Gzx+LXkm4IutqyOSoZs+rmjN7QQflg==
-----END EC PRIVATE KEY-----
`

	err = os.WriteFile(keyPath, []byte(keyContent), 0600)
	require.NoError(t, err)

	key := NewKey(keyPath)
	require.NotNil(t, key)
	require.Equal(t, keyPath, key.File)
	require.Empty(t, key.Error)
}

func TestNewKey_NonExistentFile(t *testing.T) {
	key := NewKey("nonexistent.key")
	require.NotNil(t, key)
	require.Contains(t, key.Error, "failed to read")
}

func TestNewKey_InvalidKey(t *testing.T) {
	// Create a temporary file with invalid content
	tempDir, err := os.MkdirTemp("", "test-keys")
	require.NoError(t, err)
	defer os.RemoveAll(tempDir)

	keyPath := filepath.Join(tempDir, "invalid.key")
	err = os.WriteFile(keyPath, []byte("invalid content"), 0600)
	require.NoError(t, err)

	key := NewKey(keyPath)
	require.NotNil(t, key)
	require.Contains(t, key.Error, "unknown key format or unsupported key type")
}

func TestKey_Analyze(t *testing.T) {
	key := &Key{
		File: "nonexistent.key",
	}

	err := key.analyze()
	require.Error(t, err)
	require.Contains(t, err.Error(), "failed to read")
}

func TestKey_JSONTags(t *testing.T) {
	key := &Key{
		File:  "test.key",
		Type:  "rsa",
		Size:  2048,
		Error: "test error",
	}

	// Verify that all fields have proper JSON tags
	require.NotEmpty(t, key.File)
	require.NotEmpty(t, key.Type)
	require.Positive(t, key.Size)
	require.NotEmpty(t, key.Error)
}

func TestKey_SupportedKeyTypes(t *testing.T) {
	// Test cases for different key types
	testCases := []struct {
		name     string
		keyType  string
		keySize  int
		expected string
	}{
		{"RSA", "rsa", 2048, "rsa"},
		{"ECDSA", "ecdsa", 256, "ecdsa"},
		{"Ed25519", "ed25519", 32, "ed25519"}, // Note: Ed25519 is mapped to ecdsa in the code
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			key := &Key{
				Type: tc.keyType,
				Size: tc.keySize,
			}
			require.Equal(t, tc.expected, key.Type)
			require.Positive(t, key.Size)
		})
	}
}
